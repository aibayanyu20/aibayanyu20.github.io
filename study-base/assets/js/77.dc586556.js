(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{274:function(s,t,a){"use strict";a.r(t);var e=a(6),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"mysql高级查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql高级查询"}},[s._v("#")]),s._v(" MySQL高级查询")]),s._v(" "),a("h2",{attrs:{id:"单表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单表查询"}},[s._v("#")]),s._v(" 单表查询")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询表中所有的数据")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询表中指定字段数据")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" 字段"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询表中满足条件的数据")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"什么是结果集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是结果集"}},[s._v("#")]),s._v(" 什么是结果集")]),s._v(" "),a("p",[s._v("通过查询语句查询出来的结果我们就称之为结果集，\n结果集以表的形式将查询结果返回给我们")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("p",[s._v("结果集返回的表和查询的表不是同一张表，被查询的表是真实存在的，是存储在磁盘上的，而结果集不是真实存在的，是存储在内存中的")])]),s._v(" "),a("h3",{attrs:{id:"如何给结果集的字段起别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何给结果集的字段起别名"}},[s._v("#")]),s._v(" 如何给结果集的字段起别名")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" 新的别名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"什么是字段表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是字段表达式"}},[s._v("#")]),s._v(" 什么是字段表达式")]),s._v(" "),a("p",[s._v("查询数据的时候，除了可以查询指定字段的数据以外，我们还可以查询表达式的结果")]),s._v(" "),a("p",[s._v("例如：SELECT 6+6;")]),s._v(" "),a("h3",{attrs:{id:"什么是伪表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是伪表"}},[s._v("#")]),s._v(" 什么是伪表")]),s._v(" "),a("ul",[a("li",[s._v("字段表达式虽然能够查询出表达式的结果，但是不符合MySQL的规范")]),s._v(" "),a("li",[s._v("所以我们可以通过伪表(dua1)的方式让字段表达式符合MySQL的规范")])]),s._v(" "),a("p",[s._v("select 6+6 from dua1;")]),s._v(" "),a("h3",{attrs:{id:"模糊查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模糊查询"}},[s._v("#")]),s._v(" 模糊查询")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 字段 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'条件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("ul",[a("li",[a("p",[s._v("通配符"),a("code",[s._v("_")]),s._v("： 表示任意一个字符")])]),s._v(" "),a("li",[a("p",[s._v("通配符"),a("code",[s._v("%")]),s._v("： 表示任意的0~n个字符")])])]),s._v(" "),a("h3",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[s._v("#")]),s._v(" 排序")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 复合排序 如果第一个字段名称相同，就按照第二个字段名进行排序，以此类推")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("ul",[a("li",[a("p",[s._v("默认按照升序排序ASC")])]),s._v(" "),a("li",[a("p",[s._v("降序排序DESC")])])]),s._v(" "),a("h3",{attrs:{id:"聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数"}},[s._v("#")]),s._v(" 聚合函数")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("count() ：统计")])]),s._v(" "),a("li",[a("p",[s._v("sum() : 求和")])]),s._v(" "),a("li",[a("p",[s._v("avg() : 求平均值")])]),s._v(" "),a("li",[a("p",[s._v("max() : 获取最大值")])]),s._v(" "),a("li",[a("p",[s._v("min() : 获取最小值")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("字段名名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("h4",{attrs:{id:"数值类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值类"}},[s._v("#")]),s._v(" 数值类")]),s._v(" "),a("ul",[a("li",[s._v("rand() : 生成随机数")])]),s._v(" "),a("p",[s._v("例子：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 随机排序")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n")])])]),a("ul",[a("li",[a("p",[s._v("round() : 四舍五入")])]),s._v(" "),a("li",[a("p",[s._v("ceil() : 向上取整")]),s._v(" "),a("ul",[a("li",[s._v("3.1 -> 4")])])]),s._v(" "),a("li",[a("p",[s._v("floor() : 向下取整")]),s._v(" "),a("ul",[a("li",[s._v("3.1 -> 3")])])]),s._v(" "),a("li",[a("p",[s._v("truncate() : 截取小数位")]),s._v(" "),a("ul",[a("li",[s._v("truncate(要截取的小数,要截取的位数);")])])])]),s._v(" "),a("h4",{attrs:{id:"字符串类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串类"}},[s._v("#")]),s._v(" 字符串类")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("ucase() ：转换为大写")])]),s._v(" "),a("li",[a("p",[s._v("lcase() ：转小写")])]),s._v(" "),a("li",[a("p",[s._v("left() : 从左边开始截取到指定的位置")])]),s._v(" "),a("li",[a("p",[s._v("right() : 从右边开始截取到指定的位置")])]),s._v(" "),a("li",[a("p",[s._v("substring() : 从左边的指定位置开始截取到指定位置结束")]),s._v(" "),a("ul",[a("li",[s._v("substring('1234566',2,6)")])])])]),s._v(" "),a("h3",{attrs:{id:"数据分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据分组"}},[s._v("#")]),s._v(" 数据分组")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" 分组字段 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" 聚合函数 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 分组字段"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("p",[s._v("在对数据进行分组的时候，select 后面必须是分组字段或者聚合函数，否则就只会返回第一条数据")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以查询到全部的城市")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# name数据可能会缺失")]),s._v("\n\n")])])])]),s._v(" "),a("h4",{attrs:{id:"条件查询-having"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件查询-having"}},[s._v("#")]),s._v(" 条件查询 having:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("having和where很像都是用来做条件查询的")])]),s._v(" "),a("li",[a("p",[s._v("但是where是去数据库中查询符合条件的数据，而having是在结果集中查询符合条件的数据")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'北京'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'北京'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'北京'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行不会报错")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'北京'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会报错找不到city列")]),s._v("\n\n")])])]),a("p",[s._v("需求：查询某个城市的平均分是否大于60")]),s._v(" "),a("p",[s._v("解析步骤：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 先按照城市进行分组")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 取出分组中每个城市的平均分")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" average "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 取出大于60的分的城市和成绩")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" average "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v(" average "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n")])])]),a("h3",{attrs:{id:"数据分页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据分页"}},[s._v("#")]),s._v(" 数据分页")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" 索引"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("个数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从第几个开始 给几条数据；")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"查询选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询选项"}},[s._v("#")]),s._v(" 查询选项")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("查询选项"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("ul",[a("li",[a("p",[s._v("all:      显示查询的所有数据（默认）")])]),s._v(" "),a("li",[a("p",[s._v("distinct: 去除重复的数据后在进行显示")])])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("p",[s._v("如果是通过distinct来对结果集重复的数据进行去重，\n那么只有所有列的数据都相同的时候才会出去重复")]),s._v(" "),a("p",[s._v("如果存在两个字段name和score分别为\nname,score\nls,12\nls,21\n使用语句查询去重")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("p",[s._v("这个时候去重是不生效的，因为name相同score不同不会进行去重")])]),s._v(" "),a("h3",{attrs:{id:"完整的查询语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完整的查询语句"}},[s._v("#")]),s._v(" 完整的查询语句")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("查询选项"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 字段名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 排序"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 分组"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" 索引"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("个数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[s._v("#")]),s._v(" 多表查询")]),s._v(" "),a("p",[s._v("多表查询只需要在单表查询的基础上增加一张表即可")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("表名称"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("p",[s._v("默认情况下，多表查询的情况下是笛卡尔积,第一张表有三列，第二张表有2列那么一共出来的数据就是3*2 = 6列")]),s._v(" "),a("p",[s._v("数据会出现大量的冗余")])]),s._v(" "),a("h3",{attrs:{id:"union作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union作用"}},[s._v("#")]),s._v(" union作用")]),s._v(" "),a("p",[s._v("在纵向上将多张表的结果结合起来，返回给我们")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名称"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("使用union进行多表查询，返回的结果集是第一张表的表头名称")])]),s._v(" "),a("li",[a("p",[s._v("使用union进行多表查询，必须保证多张表查询的字段个数一致,若一致就会报错")])])]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("uid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#报错字段个数不一致")]),s._v("\n\n")])])]),a("ul",[a("li",[a("p",[s._v("使用union进行多表查询，会对数据进行自动去重。")]),s._v(" "),a("ul",[a("li",[s._v("若不需要去重，则需要在union 后面加上 all => union all\n"),a("code",[s._v("select id,name from stu union all select id,score from person;")])])])])])]),s._v(" "),a("h3",{attrs:{id:"表的连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表的连接查询"}},[s._v("#")]),s._v(" 表的连接查询")]),s._v(" "),a("ul",[a("li",[s._v("将多张表中\"关联的字段\"连接到一起查询，我们称之为'表的连接查询'")]),s._v(" "),a("li",[s._v("不使用连接：\nselect * from stu,grade where stu.id = grade.stuId;")])]),s._v(" "),a("h4",{attrs:{id:"内连接-inner-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接-inner-join"}},[s._v("#")]),s._v(" 内连接 inner join")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" stu "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" grade "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" grade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stuId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在进行多表查询的时候，如果想查询指定的字段，那么必须字段名称前面加上表名称才行")])]),s._v(" "),a("li",[a("p",[s._v("内连接只会返回满足条件的数据")])])])]),s._v(" "),a("h4",{attrs:{id:"外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外连接"}},[s._v("#")]),s._v(" 外连接")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("左外连接 left join")]),s._v(" "),a("ul",[a("li",[s._v("在左外连接中，左边表是不看条件的，无论条件是否满足，都会返回左边表中的数据")]),s._v(" "),a("li",[s._v("只有右边的表会看条件，对于右边的表而言，只有满足条件才会返回对应的数据")])])]),s._v(" "),a("li",[a("p",[s._v("右外连接 right join")]),s._v(" "),a("ul",[a("li",[s._v("在右外连接中，左边表是不看条件的，无论条件是否满足，都会返回右边表中的数据")]),s._v(" "),a("li",[s._v("只有左边的表会看条件，对于左边的表而言，只有满足条件才会返回对应的数据")])])])]),s._v(" "),a("h4",{attrs:{id:"交叉连接-cross-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交叉连接-cross-join"}},[s._v("#")]),s._v(" 交叉连接 cross join")]),s._v(" "),a("p",[s._v("如果没有指定条件，那么返回笛卡尔积，如果指定了条件，返回就等价于内连接")]),s._v(" "),a("h4",{attrs:{id:"自然连接-natural"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自然连接-natural"}},[s._v("#")]),s._v(" 自然连接(natural)")]),s._v(" "),a("p",[s._v('自然连接是用来简化"内连接和外连接"的')]),s._v(" "),a("p",[s._v("如果多张表需要判断的条件字段名称一致，那么不用编写条件，自然连接就会自动判断")]),s._v(" "),a("ul",[a("li",[s._v("自然内连接")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("natural")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" 表名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("p",[s._v("如果没有指定的条件，也没有同名的字段，那么就会返回笛卡尔积")]),s._v(" "),a("p",[s._v("在自然连接中，返回的结果集会自动优化，会自动去除重复的字段")])]),s._v(" "),a("ul",[a("li",[s._v("自然外连接")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("自然左外连接 : natural left join")])]),s._v(" "),a("li",[a("p",[s._v("自然右外连接 : natural right join")])])]),s._v(" "),a("h3",{attrs:{id:"using-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-关键字"}},[s._v("#")]),s._v(" using 关键字")]),s._v(" "),a("p",[s._v("如果多张表需要判断的条件字段名称是一致的，呢么除了可以使用自然连接来简化以外，还可以使用using关键字来简化。")]),s._v(" "),a("p",[a("code",[s._v("select * from stu [inner | left | right] join grade on stu.stuId = grade.stuId")])]),s._v(" "),a("p",[s._v("等同于")]),s._v(" "),a("p",[a("code",[s._v("select * from stu [inner | left | right] join grade using(stuId)")])]),s._v(" "),a("h3",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[s._v("#")]),s._v(" 子查询")]),s._v(" "),a("ul",[a("li",[s._v("将一个查询语句的结果作为另一个查询语句的条件来使用")])]),s._v(" "),a("ol",[a("li",[s._v("标准子查询（返回的结果只有一个）")])]),s._v(" "),a("p",[s._v("select stuId from grade where score = 100;")]),s._v(" "),a("p",[s._v("select name from stu where stuId = 3;")]),s._v(" "),a("p",[s._v("select name from stu where stuId = (select stuId from grade where score = 100);")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("非标准子查询（返回结果有多个值）")])]),s._v(" "),a("p",[s._v("select name from stu where stuId in(select stuId from grade where score >= 60);")]),s._v(" "),a("ul",[a("li",[s._v("将一个查询语句的结果作为另一个查询语句的表达式来使用")])]),s._v(" "),a("p",[s._v("select name,city,score from person where score >=60;")]),s._v(" "),a("p",[s._v("select name,city,score from (select name,city,score from person where score >=60) as p;")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意点：")]),s._v(" "),a("p",[s._v("需要给当前的子查询起一个别名，不然会报错")])])])}),[],!1,null,null,null);t.default=r.exports}}]);