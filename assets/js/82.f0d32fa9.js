(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{278:function(a,n,e){"use strict";e.r(n);var t=e(6),s=Object(t.a)({},(function(){var a=this,n=a.$createElement,e=a._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"数据模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据模型"}},[a._v("#")]),a._v(" 数据模型")]),a._v(" "),e("p",[a._v("MongoDB对于文档的格式并没有强制性的要求, 但不等于我们不能在文档中表达数据的关系\n在MongoDB中我们可以通过'内嵌式结构'和'规范式结构'来表达文档之间的关系")]),a._v(" "),e("h2",{attrs:{id:"内嵌式结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内嵌式结构"}},[a._v("#")]),a._v(" 内嵌式结构")]),a._v(" "),e("p",[a._v("在文档中又包含一个文档，我们就称之为内嵌式的结构")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    name:'zs',\n    age:'18',\n    card:{\n        num:'420626200002023556',\n        date: 88\n    }\n}\n")])])]),e("h3",{attrs:{id:"一对一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一对一"}},[a._v("#")]),a._v(" 一对一")]),a._v(" "),e("p",[a._v("一个人有一张身份证")]),a._v(" "),e("p",[a._v("1.1内嵌式结构")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db.person.insert({\n    name:'zs',\n    age:'18',\n    card:{\n        num:'420626200002023556',\n        date: 88\n    }\n})\ndb.person.find({name:'zs'})\n")])])]),e("ul",[e("li",[a._v("优势: 一次查询就能得到所有数据")]),a._v(" "),e("li",[a._v("劣势: 如果数据比较复杂, 不方便管理和更新")]),a._v(" "),e("li",[a._v("应用场景: 数据不复杂/查询频率较高数据")])]),a._v(" "),e("h3",{attrs:{id:"一对多"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一对多"}},[a._v("#")]),a._v(" 一对多")]),a._v(" "),e("p",[a._v("一个人有多本书")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db.person.insert({\n    name:'zs',\n    age:'18',\n    books:[{\n        name:'玩转HTML',\n        price: 88\n    },\n    {\n        name:'玩转CSS',\n        price: 88\n    }]\n})\ndb.person.find({name:'zs'})\n")])])]),e("ul",[e("li",[a._v("优势: 一次查询就能得到所有数据")]),a._v(" "),e("li",[a._v("劣势: 冗余数据较多, 不方便管理和更新")]),a._v(" "),e("li",[a._v("应用场景: 数据不复杂/查询频率较高数据")])]),a._v(" "),e("h3",{attrs:{id:"多对多"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多对多"}},[a._v("#")]),a._v(" 多对多")]),a._v(" "),e("p",[a._v("一个学生有多个老师,\n一个老师有多个学生")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db.students.insert([{name:'zs', teachers:[{name:'it666'}, {name:'itzb'}]},\n{name:'ls', teachers:[{name:'it666'}, {name:'itzb'}]}])\n\ndb.teachers.insert([{name:'it666', students:[{name:'zs'}, {name:'ls'}]},\n{name:'itzb', students:[{name:'zs'}, {name:'ls'}]}])\ndb.students.find({name:'zs'})\ndb.teachers.find({name:'itzb'})\n")])])]),e("ul",[e("li",[a._v("优势: 一次查询就能得到所有数据")]),a._v(" "),e("li",[a._v("劣势: 冗余数据较多, 更新和管理较为复杂")]),a._v(" "),e("li",[a._v("应用场景: 数据比较简单/查询频率较高数据")])]),a._v(" "),e("h2",{attrs:{id:"规范是结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范是结构"}},[a._v("#")]),a._v(" 规范是结构")]),a._v(" "),e("p",[a._v("将文档存储在不同的集合中, 然后通过某一个字段来建立文档之间的关系, 我们就称之为规范式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    _id: 1,\n    num:'420626200002023556',\n    date: 88\n}\n{\n    name:'zs',\n    age:'18',\n    cardId: 1\n}\n")])])]),e("h3",{attrs:{id:"一对一-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一对一-2"}},[a._v("#")]),a._v(" 一对一")]),a._v(" "),e("p",[a._v("一个人有一张身份证")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db.card.insert({\n    _id: 123,\n    num:'420626200002023556',\n    date: '2022-12-08',\n    userId: 456\n})\ndb.person.insert({\n    _id: 456,\n    name:'zs',\n    age:'18',\n    cardId: 123\n})\n## 聚合查询\ndb.person.aggregate([\n    {$lookup:{\n        from: 'card',\n        localField: 'cardId',\n        foreignField: '_id',\n        as: 'card'\n    }}\n])\n")])])]),e("ul",[e("li",[a._v("优势: 如果数据比较复杂, 也方便管理和更新")]),a._v(" "),e("li",[a._v("劣势: 查询数据相对内嵌结果稍微有点复杂")]),a._v(" "),e("li",[a._v("应用场景: 数据比较复杂/更新频率较高数据")])]),a._v(" "),e("h3",{attrs:{id:"一对多-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一对多-2"}},[a._v("#")]),a._v(" 一对多")]),a._v(" "),e("p",[a._v("一个人有多本书")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db.books.insert([{\n    _id: 1,\n    name:'玩转HTML',\n    price: 88,\n    userId:123\n},\n{\n    _id: 2,\n    name:'玩转CSS',\n    price: 88,\n    userId:123\n}])\ndb.person.insert({\n    _id: 123,\n    name:'ls',\n    age:'20',\n    booksId:[1, 2]\n})\n## 聚合查询\ndb.person.aggregate([\n    {$lookup:{\n        from: 'books',\n        localField: 'booksId',\n        foreignField: '_id',\n        as: 'books'\n    }}\n])\n")])])]),e("ul",[e("li",[a._v("优势: 冗余数据较少, 更新较为方便")]),a._v(" "),e("li",[a._v("劣势: 查询数据相对内嵌结果稍微有点复杂")]),a._v(" "),e("li",[a._v("应用场景: 数据比较复杂/更新频率较高数据")])]),a._v(" "),e("h3",{attrs:{id:"多对多-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多对多-2"}},[a._v("#")]),a._v(" 多对多")]),a._v(" "),e("p",[a._v("一个学生有多个老师,\n一个老师有多个学生")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db.students.insert([{_id:1, name:'zs'},{_id:2, name:'ls'}])\ndb.teachers.insert([{_id:3, name:'it6666'},{_id:4, name:'itzb'}])\ndb.relation.insert([{stuId:1, teacherId:3},{stuId:1, teacherId:4},{stuId:2, teacherId:3},{stuId:2, teacherId:4}])\n## 聚合操作\ndb.students.aggregate([\n    {$lookup:{\n        from: 'relation',\n        localField: '_id',\n        foreignField:'stuId',\n        as: 'relation'\n    }},\n    {$lookup:{\n        from: 'teachers',\n        localField: 'relation.teacherId',\n        foreignField:'_id',\n        as: 'teachers'\n    }},\n    {$project:{_id:0, name:1, teachers:1}}\n])\n")])])]),e("ul",[e("li",[a._v("优势: 冗余数据较少, 更新较为方便")]),a._v(" "),e("li",[a._v("劣势: 查询数据相对内嵌结果稍微有点复杂")]),a._v(" "),e("li",[a._v("应用场景: 数据比较复杂/更新频率较高数据")])]),a._v(" "),e("h2",{attrs:{id:"树形结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树形结构"}},[a._v("#")]),a._v(" 树形结构")]),a._v(" "),e("p",[a._v("在MongoDB中我们除了可以使用'内嵌式结构'和'规范式结构'来表示数据的关系以外")]),a._v(" "),e("p",[a._v("由于MongoDB数据的灵活性, 我们还可以使用'树形结构'来表示数据之间的关系")]),a._v(" "),e("h3",{attrs:{id:"什么是树形结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是树形结构"}},[a._v("#")]),a._v(" 什么是树形结构")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\n            Database\n               |\n     |--------------------|\n Relational           No-Relational\n     |          |-----------|-------------|\n   MySQL      Key-Value                Document\n                |                         |\n              Redis                    MongoDB\n\n")])])]),e("h3",{attrs:{id:"对于经常需要查询子节点的数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对于经常需要查询子节点的数据"}},[a._v("#")]),a._v(" 对于经常需要查询子节点的数据")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{name:'Database', parent:null}\n{name:'No-Relational', parent:'Database'}\n{name:'Document', parent:'No-Relational'}\n{name:'MongoDB', parent:'Document'}\n{name:'Key-Value', parent:'No-Relational'}\n{name:'Redis', parent:'Key-Value'}\n\n")])])]),e("p",[a._v("例如:我们要查询非关系型数据库有几种类型, 我们可以使用find({parent:'No-Relational'})")]),a._v(" "),e("h3",{attrs:{id:"对于经常需要查询父节点的数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对于经常需要查询父节点的数据"}},[a._v("#")]),a._v(" 对于经常需要查询父节点的数据")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{name:'Database', children:['Relational', 'No-Relational']}\n{name:'No-Relational', children:['Key-Value', 'Document']}\n{name:'Document', children:['MongoDB']}\n{name:'MongoDB', children:[]}\n")])])]),e("p",[a._v("例如:我们要查询MongoDB是什么类型的的数据, 我们可以使用find({children:{$in:['MongoDB']}})")]),a._v(" "),e("h3",{attrs:{id:"对于经常查询祖先或者后代节点的数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对于经常查询祖先或者后代节点的数据"}},[a._v("#")]),a._v(" 对于经常查询祖先或者后代节点的数据")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{name:'Database', ancestors:[]}\n{name:'No-Relational', ancestors:['Database']}\n{name:'Document', ancestors:['Database', 'No-Relational']}\n{name:'MongoDB', ancestors:['Database', 'No-Relational', 'Document']}\n")])])]),e("p",[a._v("例如: 我们要查询MongoDB的祖先有哪些, 我们可以使用find({name:'MongoDB'})")]),a._v(" "),e("p",[a._v("例如: 我们要查询Database的后代有哪些, 我们可以使用find({ancestors:{$in:['Database']}}})")])])}),[],!1,null,null,null);n.default=s.exports}}]);