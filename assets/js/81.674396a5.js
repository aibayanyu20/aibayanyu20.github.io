(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{276:function(t,n,e){"use strict";e.r(n);var a=e(6),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"复制集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制集"}},[t._v("#")]),t._v(" 复制集")]),t._v(" "),e("p",[t._v("如果所有的数据都存在一台MongoDB服务器，会存在什么问题？")]),t._v(" "),e("ol",[e("li",[t._v("不具备高可用性，一旦这台MongoDB服务器宕机了，那么用户就无法继续使用了")]),t._v(" "),e("li",[t._v("不具备数据安全性，一旦MongoDB服务器坏掉了，那么用户的数据丢失了")]),t._v(" "),e("li",[t._v("不能对数据进行分流，不能采用就近的原则进行访问")])]),t._v(" "),e("p",[t._v("如何解决上述的问题？")]),t._v(" "),e("p",[t._v("在MongoDB中提供了一个叫做复制集的东西，我们可以通过复制集来解决上述问题")]),t._v(" "),e("p",[t._v("什么是复制集？")]),t._v(" "),e("p",[t._v("复制集就是将多台保存了相同内容的MongoDB服务器组成一个集群，我们就称为复制集")]),t._v(" "),e("p",[t._v("什么是复制集的节点？")]),t._v(" "),e("p",[t._v("在复制集中每台MongoDB服务器都是一个节点")]),t._v(" "),e("h2",{attrs:{id:"特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在一个复制集中最多只能有50个节点")])]),t._v(" "),e("li",[e("p",[t._v("在复制集中必须有一个主节点")]),t._v(" "),e("ul",[e("li",[t._v("什么是主节点\n在复制集中，只有一个节点可以同时读写数据，那么这个节点我们称之为主节点")])])]),t._v(" "),e("li",[e("p",[t._v("在复制集中除了主节点以外的节点，我们都称之为副节点")]),t._v(" "),e("ul",[e("li",[t._v("什么是副节点\n在复制集中副节点只能读取数据，不能写入数据，那么这个节点我们称之为副节点")])])]),t._v(" "),e("li",[e("p",[t._v("在复制集中，节点之间，每隔两秒就会相互发送心跳请求\n为了相互检查有没有节点出现了问题，如果某一个节点10秒还没有响应其他节点的请求，那么就会视为这个节点出现了问题")])]),t._v(" "),e("li",[e("p",[t._v("如果主节点出现了问题（宕机、坏掉），副节点就会自动发起投票，重新选举主节点\n因为在复制集中只有主节点可以写入数据，那么主节点挂了，就以为着不能写入数据了，\n所以需要重新从其他的副节点中选举出一个作为主节点，这样才能保证既能写入也能读取数据")])])]),t._v(" "),e("h2",{attrs:{id:"复制集选举的规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制集选举的规则"}},[t._v("#")]),t._v(" 复制集选举的规则")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("发起选举的前提条件")]),t._v(" "),e("ul",[e("li",[t._v("副节点发送心跳请求给主节点10秒之后还没有收到响应，这个时候副节点\n就会认为主节点已经挂掉了，就会重新发起选举请求")])])]),t._v(" "),e("li",[e("p",[t._v("在复制集中每一个节点都有一个选举计数器")])]),t._v(" "),e("li",[e("p",[t._v("在复制集中发起选举的节点我们称之为候选节点")])]),t._v(" "),e("li",[e("p",[t._v("开始选举")]),t._v(" "),e("ul",[e("li",[t._v("候选节点会先给自己的选举计数器+1")]),t._v(" "),e("li",[t._v("候选节点会给所有的节点发起选举请求\n并将自己的选举计数器的值一天同时发送过去")]),t._v(" "),e("li",[t._v("其他节点接收到选举请求之后会先利用选举请求中计数器的值更新自己的值")]),t._v(" "),e("li",[t._v("更新完计数器的值之后，会对比自己保存的数据和候选节点的数据，谁的数据比较完整\n如果自己的数据比候选节点完整，那么会透出反对票\n如果自己的数据没有候选节点的数据完整，那么就会投出同意票")]),t._v(" "),e("li",[t._v("所有的节点优盘完成之后，如果超过半数同意\n那么候选节点就自动变为主节点\n如果投票完成之后同意票的票数没有超过半数\n那么其他的副节点就会重新再次发起选举\n直到有一个节点有超过半数的节点同意为止")])]),t._v(" "),e("p",[t._v("如果某些节点挂掉了，不能参与投票，那么默认就是反对票")])])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意点：")]),t._v(" "),e("p",[t._v("在复制集中参与投票的节点最多只能有7个，由于需要有超过半数的节点同意才能成为主节点\n所以在创建复制集的时候，最少需要3个节点")]),t._v(" "),e("p",[t._v("原因：由于需要有超过半数的节点同意才能成为主节点，所以在复制集中我们一般会创建奇数个节点")])]),t._v(" "),e("ul",[e("li",[t._v("触发选举的其他条件")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("初始化复制集时，会自动触发选举")])]),t._v(" "),e("li",[e("p",[t._v("有新节点加入的时候，会自动选举")])]),t._v(" "),e("li",[e("p",[t._v("当前主节点挂掉的时候，会自动选举")])])]),t._v(" "),e("h2",{attrs:{id:"复制集同步规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制集同步规则"}},[t._v("#")]),t._v(" 复制集同步规则")]),t._v(" "),e("h3",{attrs:{id:"在复制集中如何保证所有节点保存的数据都相同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在复制集中如何保证所有节点保存的数据都相同"}},[t._v("#")]),t._v(" 在复制集中如何保证所有节点保存的数据都相同")]),t._v(" "),e("ol",[e("li",[t._v("初始化同步")])]),t._v(" "),e("ul",[e("li",[t._v("当有一个新的节点加入到复制集之后，就会自动进行初始化同步\n初始化同步会将主节点中所有的数据库、集合、文档、索引都拷贝一份给新的节点")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("同步写库记录")])]),t._v(" "),e("ul",[e("li",[t._v("在每一个MongoDB服务器上都有一个local数据库，这个数据库中有一个oplog集合，这个集合中就保存了当前服务器所有的操作\n执行完初始化同步之后，副节点会定期的同步写库记录，会定期执行写库记录")])]),t._v(" "),e("h2",{attrs:{id:"搭建复制集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搭建复制集"}},[t._v("#")]),t._v(" 搭建复制集")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("下载地址："),e("a",{attrs:{href:"https://www.mongodb.com/try/download/community",title:"MongoDB下载地址",target:"_blank",rel:"noopener noreferrer"}},[t._v("MongoDB下载地址"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("解压MongoDB安装包")])]),t._v(" "),e("li",[e("p",[t._v("在安装目录下新建data/conf/log文件夹")])]),t._v(" "),e("li",[e("p",[t._v("在conf文件夹下新创建mongod.conf，配置文件如下")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("storage:\n    dbPath: /Users/zhuzhengjian/Desktop/huanjing/mongo1/data\n    journal:\n        enabled: true\nsystemLog:\n    destination: file\n    path: /Users/zhuzhengjian/Desktop/huanjing/mongo1/log/mongodb.log\n    logAppend: true\nnet:\n    port: 27018\n    bindIp: 127.0.0.1\nreplication:\n    replSetName: mongotest\n  \n")])])]),e("p",[t._v("其他电脑做相同的配置即可")]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("启动多个mongod并使用当前文件夹下面的配置")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("\n./mongod -f "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/conf/mongod.conf\n\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[t._v("测试连接所有mongo数据库")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mongo --host 127.0.0.1 --port 27018\nmongo --host 127.0.0.1 --port 27019\nmongo --host 127.0.0.1 --port 27020\n")])])]),e("ol",{attrs:{start:"7"}},[e("li",[t._v("在任何一个mongo复制集中启动mongoDB，配置复制集")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nrs.initiate({\n _id:'mongotest', \nmembers:[ \n{_id:0,host:'127.0.0.1:27018'}, \n{_id:1,host:'127.0.0.1:27019'}, \n{_id:2,host:'127.0.0.1:27020'}] \n})\n\n")])])]),e("ul",[e("li",[t._v("其他配置项说明\n"),e("ol",[e("li",[t._v("_id\t        整数\t节点的唯一标识。")]),t._v(" "),e("li",[t._v("host\t        字符串\t节点的IP地址，包含端口号。")]),t._v(" "),e("li",[t._v("arbiterOnly\t布尔值\t是否为投票节点，默认是false。是设置投票(选举)节点有关的参数")]),t._v(" "),e("li",[t._v("priority\t    整数\t选举为主节点的权值，默认是1，范围0-1000。")]),t._v(" "),e("li",[t._v("hidden\t    布尔值\t是否隐藏，默认false，是设置隐藏节点有关的参数。")]),t._v(" "),e("li",[t._v("votes\t    整数\t投票数，默认为1，取值是0或1，是设置”投票“节点有关的参数。")]),t._v(" "),e("li",[t._v("slaveDelay\t整数\t延时复制，是设置延时节点有关的参数。单位秒(s)")])])])]),t._v(" "),e("ol",{attrs:{start:"8"}},[e("li",[t._v("执行完成后查看当前复制集的状态")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('rs.status()\n\n### 状态信息 ###\n{\n\t"set" : "mongotest",\n\t"date" : ISODate("2020-08-22T05:10:03.213Z"),\n\t"myState" : 1,\n\t"term" : NumberLong(1),\n\t"syncSourceHost" : "",\n\t"syncSourceId" : -1,\n\t"heartbeatIntervalMillis" : NumberLong(2000),\n\t"majorityVoteCount" : 2,\n\t"writeMajorityCount" : 2,\n\t"votingMembersCount" : 3,\n\t"writableVotingMembersCount" : 3,\n\t"optimes" : {\n\t\t"lastCommittedOpTime" : {\n\t\t\t"ts" : Timestamp(1598073002, 1),\n\t\t\t"t" : NumberLong(1)\n\t\t},\n\t\t"lastCommittedWallTime" : ISODate("2020-08-22T05:10:02.079Z"),\n\t\t"readConcernMajorityOpTime" : {\n\t\t\t"ts" : Timestamp(1598073002, 1),\n\t\t\t"t" : NumberLong(1)\n\t\t},\n\t\t"readConcernMajorityWallTime" : ISODate("2020-08-22T05:10:02.079Z"),\n\t\t"appliedOpTime" : {\n\t\t\t"ts" : Timestamp(1598073002, 1),\n\t\t\t"t" : NumberLong(1)\n\t\t},\n\t\t"durableOpTime" : {\n\t\t\t"ts" : Timestamp(1598073002, 1),\n\t\t\t"t" : NumberLong(1)\n\t\t},\n\t\t"lastAppliedWallTime" : ISODate("2020-08-22T05:10:02.079Z"),\n\t\t"lastDurableWallTime" : ISODate("2020-08-22T05:10:02.079Z")\n\t},\n\t"lastStableRecoveryTimestamp" : Timestamp(1598072982, 1),\n\t"electionCandidateMetrics" : {\n\t\t"lastElectionReason" : "electionTimeout",\n\t\t"lastElectionDate" : ISODate("2020-08-22T05:09:41.971Z"),\n\t\t"electionTerm" : NumberLong(1),\n\t\t"lastCommittedOpTimeAtElection" : {\n\t\t\t"ts" : Timestamp(0, 0),\n\t\t\t"t" : NumberLong(-1)\n\t\t},\n\t\t"lastSeenOpTimeAtElection" : {\n\t\t\t"ts" : Timestamp(1598072970, 1),\n\t\t\t"t" : NumberLong(-1)\n\t\t},\n\t\t"numVotesNeeded" : 2,\n\t\t"priorityAtElection" : 1,\n\t\t"electionTimeoutMillis" : NumberLong(10000),\n\t\t"numCatchUpOps" : NumberLong(0),\n\t\t"newTermStartDate" : ISODate("2020-08-22T05:09:42.041Z"),\n\t\t"wMajorityWriteAvailabilityDate" : ISODate("2020-08-22T05:09:42.695Z")\n\t},\n\t"members" : [\n\t\t{\n\t\t\t"_id" : 0,\n\t\t\t"name" : "127.0.0.1:27018",\n\t\t\t"health" : 1,\n\t\t\t"state" : 1,\n\t\t\t"stateStr" : "PRIMARY",\n\t\t\t"uptime" : 685,\n\t\t\t"optime" : {\n\t\t\t\t"ts" : Timestamp(1598073002, 1),\n\t\t\t\t"t" : NumberLong(1)\n\t\t\t},\n\t\t\t"optimeDate" : ISODate("2020-08-22T05:10:02Z"),\n\t\t\t"syncSourceHost" : "",\n\t\t\t"syncSourceId" : -1,\n\t\t\t"infoMessage" : "",\n\t\t\t"electionTime" : Timestamp(1598072981, 1),\n\t\t\t"electionDate" : ISODate("2020-08-22T05:09:41Z"),\n\t\t\t"configVersion" : 1,\n\t\t\t"configTerm" : 1,\n\t\t\t"self" : true,\n\t\t\t"lastHeartbeatMessage" : ""\n\t\t},\n\t\t{\n\t\t\t"_id" : 1,\n\t\t\t"name" : "127.0.0.1:27019",\n\t\t\t"health" : 1,\n\t\t\t"state" : 2,\n\t\t\t"stateStr" : "SECONDARY",\n\t\t\t"uptime" : 32,\n\t\t\t"optime" : {\n\t\t\t\t"ts" : Timestamp(1598072982, 5),\n\t\t\t\t"t" : NumberLong(1)\n\t\t\t},\n\t\t\t"optimeDurable" : {\n\t\t\t\t"ts" : Timestamp(1598072982, 5),\n\t\t\t\t"t" : NumberLong(1)\n\t\t\t},\n\t\t\t"optimeDate" : ISODate("2020-08-22T05:09:42Z"),\n\t\t\t"optimeDurableDate" : ISODate("2020-08-22T05:09:42Z"),\n\t\t\t"lastHeartbeat" : ISODate("2020-08-22T05:10:02.029Z"),\n\t\t\t"lastHeartbeatRecv" : ISODate("2020-08-22T05:10:03.055Z"),\n\t\t\t"pingMs" : NumberLong(0),\n\t\t\t"lastHeartbeatMessage" : "",\n\t\t\t"syncSourceHost" : "127.0.0.1:28018",\n\t\t\t"syncSourceId" : 0,\n\t\t\t"infoMessage" : "",\n\t\t\t"configVersion" : 1,\n\t\t\t"configTerm" : 1\n\t\t},\n\t\t{\n\t\t\t"_id" : 2,\n\t\t\t"name" : "127.0.0.1:27020",\n\t\t\t"health" : 1,\n\t\t\t"state" : 2,\n\t\t\t"stateStr" : "SECONDARY",\n\t\t\t"uptime" : 32,\n\t\t\t"optime" : {\n\t\t\t\t"ts" : Timestamp(1598072982, 5),\n\t\t\t\t"t" : NumberLong(1)\n\t\t\t},\n\t\t\t"optimeDurable" : {\n\t\t\t\t"ts" : Timestamp(1598072982, 5),\n\t\t\t\t"t" : NumberLong(1)\n\t\t\t},\n\t\t\t"optimeDate" : ISODate("2020-08-22T05:09:42Z"),\n\t\t\t"optimeDurableDate" : ISODate("2020-08-22T05:09:42Z"),\n\t\t\t"lastHeartbeat" : ISODate("2020-08-22T05:10:02.028Z"),\n\t\t\t"lastHeartbeatRecv" : ISODate("2020-08-22T05:10:03.055Z"),\n\t\t\t"pingMs" : NumberLong(0),\n\t\t\t"lastHeartbeatMessage" : "",\n\t\t\t"syncSourceHost" : "127.0.0.1:28018",\n\t\t\t"syncSourceId" : 0,\n\t\t\t"infoMessage" : "",\n\t\t\t"configVersion" : 1,\n\t\t\t"configTerm" : 1\n\t\t}\n\t],\n\t"ok" : 1,\n\t"$clusterTime" : {\n\t\t"clusterTime" : Timestamp(1598073002, 1),\n\t\t"signature" : {\n\t\t\t"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),\n\t\t\t"keyId" : NumberLong(0)\n\t\t}\n\t},\n\t"operationTime" : Timestamp(1598073002, 1)\n}\n')])])]),e("ol",{attrs:{start:"9"}},[e("li",[t._v("在副节点读取"),e("code",[t._v("rs.slaveOk()")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);