(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{204:function(a,t,s){"use strict";s.r(t);var n=s(6),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"dart"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dart"}},[a._v("#")]),a._v(" Dart")]),a._v(" "),s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),s("p",[a._v("mac安装dart")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("\nbrew tap dart-lang/dart\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" dart\n\n")])])]),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),s("h3",{attrs:{id:"入口方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入口方法"}},[a._v("#")]),a._v(" 入口方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 定义一个没有返回值的入口方法\nvoid main() {\n  print("你好");\n}\n\n')])])]),s("h3",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 这是单行注释\n\n/**\n    这是多行注释\n*/\n\n")])])]),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),s("p",[a._v("变量的命名规则：")]),a._v(" "),s("ol",[s("li",[a._v("变量名称必须由数字、字母、下划线和美元符($)组成。")]),a._v(" "),s("li",[a._v("注意：标识符开头不能是数字")]),a._v(" "),s("li",[a._v("标识符不能是保留字和关键字。")]),a._v(" "),s("li",[a._v("变量的名字是区分大小写的如: age和Age是不同的变量。在实际的运用中,也建议,不要用一个单词大小写区分两个变量。\n5、标识符(变量名称)一定要见名思意 ：变量名称建议用名词，方法名称建议用动词")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 会自动推断类型\nvar str = "this is var";\n// 如果再赋值\nstr = 1223; // 报错\n// 也可以使用强类型的方式定义\nString str1 = "ssas";\n// 布尔值\nbool b = false;\n// 数值类型\nint num = 1;\n')])])]),s("h3",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[a._v("#")]),a._v(" 常量")]),a._v(" "),s("p",[a._v("常量是不允许被修改的")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 常量定义\nconst PI = 3.14\n\nfinal Circle = 5;\n// 赋值定义一个初始时间\nfinal date = new DateTime.now();\n// 使用const定义就会报错\n\n")])])]),s("p",[s("strong",[a._v("final 和const的区别：")])]),a._v(" "),s("p",[a._v("final可以开始不赋值，只能赋值一次，\n而final不仅有const的编译时常量的特性，最重要的是，\nfinal是一个惰性初始化，即在运行时第一次使用才会被初始化")]),a._v(" "),s("h3",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")])])}),[],!1,null,null,null);t.default=r.exports}}]);