(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{279:function(a,e,n){"use strict";n.r(e);var t=n(6),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"聚合操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#聚合操作"}},[a._v("#")]),a._v(" 聚合操作")]),a._v(" "),n("ul",[n("li",[a._v("聚合操作就是通过一个方法完成一系列操作")]),a._v(" "),n("li",[a._v("在聚合操作中，每一个操作我们称之为一个阶段，聚合操作会将上一个阶段结果传给下一个阶段，继续处理，\n所有阶段处理完毕会返回一个新的结果集给我们")])]),a._v(" "),n("p",[a._v("聚合操作格式：")]),a._v(" "),n("p",[n("code",[a._v("db.集合名称.aggregate(<pipeline>,<options>)")])]),a._v(" "),n("ul",[n("li",[a._v("pipeline:定义每个阶段操作")]),a._v(" "),n("li",[a._v("options:聚合操作额外配置")])]),a._v(" "),n("h2",{attrs:{id:"project"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#project"}},[a._v("#")]),a._v(" $project")]),a._v(" "),n("p",[a._v("$project: 对输入文档进行再次投影")]),a._v(" "),n("p",[a._v("作用：按照我们需要的格式生成结果集")]),a._v(" "),n("p",[a._v("格式："),n("code",[a._v("{$project:{<field>:<value>}}")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("{\n    name:{firstName:'name',lastName:'Zhu'},\n    age:18,\n    book:{name:'html',price:12}\n}\n\ndb.person.aggregate([\n    {\n        $project:{_id:0,myName:'$name.firstName'} #不显示_id,第二个参数相当于mysql中更改修改字段的名称\n    }\n])\n\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("注意点:")]),a._v(" "),n("p",[a._v("聚合操作不会修改原有的文档，而是返回一个新的文档给我们")]),a._v(" "),n("p",[a._v("如果在$project聚合操作中，是用来原有文档中不存在的字段，那么自动使用null填充")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.aggregate([\n    {\n        $project:{fullName:['$name.firstName','$name.middleName','$name.lastName']}# 中间的值并不存在，所以会直接给一个null值\n    }\n])\n\n")])])])]),a._v(" "),n("h2",{attrs:{id:"match"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[a._v("#")]),a._v(" $match")]),a._v(" "),n("p",[a._v("$match: 和find方法中的第一个参数一样，用于筛选符合条件的文档")]),a._v(" "),n("p",[a._v("格式："),n("code",[a._v("{$match:{<query>}}")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("{\n    name:{firstName:'name',lastName:'Zhu'},\n    age:18,\n    book:{name:'html',price:12}\n}\n\ndb.person.aggregate([\n    {\n        $match:{\n            'name.firstName':'name'\n        }\n    },\n    {\n        $project:{\n            _id:0,\n            fullName:['$name.firstName','$name.lastName'],\n            myAge:'$age'\n        }\n    }\n])\n\n")])])]),n("ul",[n("li",[a._v("以上语句的执行顺序(按管道的顺序由上至下执行)")])]),a._v(" "),n("ol",[n("li",[n("p",[a._v("先查询符合条件的文档")])]),a._v(" "),n("li",[n("p",[a._v("再对符合条件的文档进行处理，修改符合文档的名称")])])]),a._v(" "),n("h2",{attrs:{id:"limit和-skip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#limit和-skip"}},[a._v("#")]),a._v(" $limit和$skip")]),a._v(" "),n("p",[a._v("$limit : 和游标的limit方法一样，用于指定获取几个文档")]),a._v(" "),n("p",[a._v("格式："),n("code",[a._v("{$limit:<number>}")])]),a._v(" "),n("p",[a._v("$skip : 和游标的skip一样，用于指定跳过几个文档")]),a._v(" "),n("p",[a._v("格式："),n("code",[a._v("{$skip:<number>}")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.aggregate([\n    {$skip:1},\n    {$limit:1},\n    {$project:{\n        _id:0,\n        fullName:['$name.firstName','$name.lastName'],\n        myAge:'$age'\n    }}\n])\n\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("注意点")]),a._v(" "),n("p",[a._v("在聚合操作中$limit和$skip是不同的阶段，所以要写到不同的对象中")])]),a._v(" "),n("h2",{attrs:{id:"unwind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unwind"}},[a._v("#")]),a._v(" $unwind")]),a._v(" "),n("p",[a._v("$unwind: 展开数组字段")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("{\n    name:{firstName:'name',lastName:'Zhu'},\n    age:18,\n    book:{name:'html',price:12},\n    tags:['html','js']\n}\n\ndb.person.aggregate([\n    {\n        $unwind:{\n            path:'$tags', #需要展开的字段\n            includeArrayIndex:'index' #展开字段的第几个值\n        }\n    }\n])\n结果集为两个：\n\n{\n    tags:'html',\n    index:NumberLong(0)\n}\n\n{\n    tags:'js',\n    index:NumberLong(1)\n}\n\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("注意点")]),a._v(" "),n("p",[a._v("如果原有文档中没有需要操作的数组字段/数组字段没有元素/null,那么在$unwind阶段，会自动将这些数据过滤掉")]),a._v(" "),n("p",[a._v("如果不需要过滤掉需要添加一个参数："),n("code",[a._v("preserveNullAndEmptyArrays:true")])])]),a._v(" "),n("h2",{attrs:{id:"sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[a._v("#")]),a._v(" $sort")]),a._v(" "),n("p",[a._v("$sort：和文档游标sort方法一致，对文档进行排序")]),a._v(" "),n("p",[a._v("格式："),n("code",[a._v("{$sort:{<field>:1|-1}}")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.集合文档.aggregate([\n    {\n        $sort:{\n            age:1\n        }\n    }\n])\n\n")])])]),n("h2",{attrs:{id:"lookup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lookup"}},[a._v("#")]),a._v(" $lookup")]),a._v(" "),n("p",[a._v("$lookup : 用来做关联查询的")]),a._v(" "),n("h3",{attrs:{id:"第一种格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一种格式"}},[a._v("#")]),a._v(" 第一种格式")]),a._v(" "),n("p",[a._v("格式：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("\n{\n    $lookup:{\n        from:关联集合名称,\n        localField:当亲集合中的字段名称\n        foreignField:关联集合中的字段名称,\n        as:输出字段名的名称\n    }\n}\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.insert(\n    [\n        {\n            name:{firstName:'name',lastName:'Zhu'},\n            age:18,\n            books:['html','js']\n        },\n        {\n            name:{firstName:'name1',lastName:'Zhu1'},\n            age:19,\n            books:['vue']\n        },\n        {\n            name:{firstName:'name2',lastName:'Zhu2'},\n            age:20,\n            books:[]\n        }\n    ]\n)\n\ndb.books.insert([\n    {name:'html',price:88},\n    {name:'js',price:66},\n    {name:'vue',price:99}\n])\n\n# 取出每个拥有的书对应的书的详情\n\ndb.person.aggregate([\n    {\n        $unwind:{path:'$books'}\n    },\n    {$lookup:\n        {\n            from:'books',# 集合名称\n            localField:'books',#person字段名称\n            foreifnField:'name',\n            as:'data'\n        }\n    }\n])\n")])])]),n("h3",{attrs:{id:"第二种格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二种格式"}},[a._v("#")]),a._v(" 第二种格式")]),a._v(" "),n("p",[a._v("格式：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("{\n    $lookup:{\n        from:关联集合名称,\n        let:{<var_1>:<expression>,...},# 定义给关联集合的聚合操作使用的当前集合的常量\n        pipeline:[<pipline to execute on the collection to join>],#关联集合的聚合操作\n        as :输出字段的名称\n    }\n}\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.aggregate([\n    {$lookup:{\n        from:'books',\n        let:{bks:'$books'},\n        pipeline:[\n            {$match:{\n                $expr:{\n                    $and:[\n                        {$gte:['$price',99]},\n                        {$in:['$name','$$bks']} #两个$$代表定义的常量\n                    ]\n                }\n            }}\n        ],\n        as:'data'\n    }}\n])\n\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("注意点：")]),a._v(" "),n("p",[a._v("在第二种$lookup阶段的第二种格式中，默认情况下是无相关查询")])]),a._v(" "),n("h2",{attrs:{id:"group"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#group"}},[a._v("#")]),a._v(" $group")]),a._v(" "),n("p",[a._v("$group:对文档进行分组")]),a._v(" "),n("p",[a._v("格式：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("\n{\n$group:{\n    _id:<expression>,\n    <field1>:{<accumulator1>:<expression>},\n    .......\n}\n}\n\n")])])]),n("p",[n("code",[a._v("_id")]),a._v(": 定义分组的规则")]),a._v(" "),n("p",[n("code",[a._v("<field>")]),a._v(" : 定义新字段")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.insert([\n{name:'zs', age:10, city:'北京'},\n{name:'ls', age:20, city:'上海'},\n{name:'ww', age:30, city:'北京'},\n{name:'zl', age:40, city:'上海'},\n{name:'lnj', age:50, city:'北京'},\n{name:'jjj', age:60, city:'广州'},\n])\n\ndb.person.aggregate([\n    {$group:{\n        _id:'$city',\n        totalAge:{$sum:'$age'},\n        avgAge:{$avg:'$age'},\n        minAge:{$min:'$age'},\n        maxAge:{$max:'$age'},\n        totalName:{$push:'$name'}\n    }}\n])\n\n")])])]),n("h2",{attrs:{id:"out"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#out"}},[a._v("#")]),a._v(" $out")]),a._v(" "),n("p",[n("code",[a._v("$out")]),a._v(": 前面阶段处理完的文档写入一个新的集合中")]),a._v(" "),n("p",[n("code",[a._v("{$out:'新的集合名称'}")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.aggregate([\n    {$group:{\n        _id:'$city',\n        totalAge:{$sum:'$age'},\n        avgAge:{$avg:'$age'},\n        minAge:{$min:'$age'},\n        maxAge:{$max:'$age'},\n        totalName:{$push:'$name'}\n    }},\n    {\n        $out:'newPerson'\n    }\n])\n\n")])])]),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("注意点：")]),a._v(" "),n("p",[a._v("如果通过$out将结果集写入到一个新的集合中，如果这个集合不存在，那么就创建一个新的集合。\n如果存在集合，会覆盖掉原来的集合的文档")])]),a._v(" "),n("h2",{attrs:{id:"聚合操作的额外配置-allowdiskuse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#聚合操作的额外配置-allowdiskuse"}},[a._v("#")]),a._v(" 聚合操作的额外配置——allowDiskUse")]),a._v(" "),n("p",[n("code",[a._v("<options>:")])]),a._v(" "),n("p",[n("code",[a._v("{allowDiskUse:<boolean>}")])]),a._v(" "),n("p",[n("code",[a._v("allowDiskUse")]),a._v("默认取值是"),n("code",[a._v("false")]),a._v("，默认情况下管道阶段占用的内存不能超过100M,如果超过100M就会报错，\n如果需要处理的数据比较多，聚合操作使用的内存可能超过100M,那么我们可以将\n"),n("code",[a._v("allowDiskUse")]),a._v("设置为"),n("code",[a._v("true")]),a._v(",如果"),n("code",[a._v("allowDiskUse")]),a._v("设置为"),n("code",[a._v("true")]),a._v("，那么一旦超过100M\n就会将操作的数据写入到临时的文件中，然后再继续操作")]),a._v(" "),n("h2",{attrs:{id:"表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[a._v("#")]),a._v(" 表达式")]),a._v(" "),n("h3",{attrs:{id:"字段路径表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字段路径表达式"}},[a._v("#")]),a._v(" 字段路径表达式")]),a._v(" "),n("p",[n("code",[a._v("$<field>")]),a._v(":使用$来指示字段路径")]),a._v(" "),n("p",[n("code",[a._v("$<field>.<sub-field>")]),a._v(":使用$和.来指定内嵌文档字段路径")]),a._v(" "),n("p",[a._v("例如：")]),a._v(" "),n("p",[a._v("$name")]),a._v(" "),n("p",[a._v("$stu.name")]),a._v(" "),n("h3",{attrs:{id:"系统变量表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#系统变量表达式"}},[a._v("#")]),a._v(" 系统变量表达式")]),a._v(" "),n("p",[a._v("$$CURRENT:表示当前操作的文档")]),a._v(" "),n("p",[a._v("$$CURRENT.name 等价于 $name")]),a._v(" "),n("h3",{attrs:{id:"常量表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常量表达式"}},[a._v("#")]),a._v(" 常量表达式")]),a._v(" "),n("p",[a._v("将字段表达式变成一个常量字符串")]),a._v(" "),n("p",[a._v("使'$age'不输出值直接输出$age字符串")]),a._v(" "),n("p",[n("code",[a._v("$literal:<value>:表示常量<value>")])]),a._v(" "),n("p",[n("code",[a._v("$literal:'$name' :表示常量字符串$name")])]),a._v(" "),n("h2",{attrs:{id:"数据类型转换操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换操作符"}},[a._v("#")]),a._v(" 数据类型转换操作符")]),a._v(" "),n("p",[a._v("MongoDB对于文档的格式并没有强制性的要求，同一个集合中存储的文档，字段的个数和数据类型都可以不同\n对于文档的格式没有强制性的要求，这是MongoDB的一大优势，但是同时也增加了数据消费端的使用难度\n因为我们在使用数据的时候，有可能同一个字段取出来的数据类型是不同的，这样非常不利于我们后续操作，所以\n也正是因为如此，MongoDB在4.0中推出了$convert数据类型转换操作符")]),a._v(" "),n("ul",[n("li",[a._v("通过$convert数据类型转换操作符，我们可以将不同的数据类型转换成相同的数据类型\n以便于以后在使用数据的过程中能够统一对数据进行处理")])]),a._v(" "),n("p",[a._v("格式：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("{$convert:{\n    input:'需要转换的字段',\n    to:'转换之后的数据类型',\n    onError:'不支持的转换类型',\n    onNull:'没有需要转换的数据'\n}}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("db.person.insert([\n{name:'zs', timestamp:ISODate('2020-08-09T11:23:34.733Z')},\n{name:'ls', timestamp:'2021-02-14 12:00:06 +0800  '},\n{name:'ww', timestamp:'  2023-04-01T12:00:00Z'},\n{name:'zl', timestamp:'1587009270000'},\n{name:'it666', timestamp:'Sunday'},\n{name:'itzb'},\n])\n\ndb.person.aggregate(\n    [\n        {$project:{\n            _id:0,\n            name:'$name',\n            time:{\n                $convert:{\n                    input:'$timestamp',\n                    to:'date',\n                    onError:'不能转换',\n                    onNull:'没有时间字段'\n                }\n            }    \n        }\n        }\n    ]\n)\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);